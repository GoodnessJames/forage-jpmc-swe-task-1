From 54028ffcad0a9f7ee9ffd99e7ff90beadd582057 Mon Sep 17 00:00:00 2001
From: GoodnessJames <akomagoodness97@gmail.com>
Date: Sat, 14 Oct 2023 05:46:57 +0100
Subject: [PATCH] Fix broken client datafeed script and add unittests

---
 client3.py     | 18 +++++++++++-------
 client_test.py | 47 +++++++++++++++++++++++++++++++----------------
 2 files changed, 42 insertions(+), 23 deletions(-)
 mode change 100644 => 100755 client3.py
 mode change 100644 => 100755 client_test.py

diff --git a/client3.py b/client3.py
old mode 100644
new mode 100755
index 3fc09b7..f86e8b4
--- a/client3.py
+++ b/client3.py
@@ -1,3 +1,4 @@
+#!/usr/bin/python3
 ################################################################################
 #
 #  Permission is hereby granted, free of charge, to any person obtaining a
@@ -31,18 +32,20 @@ N = 500
 
 def getDataPoint(quote):
     """ Produce all the needed values to generate a datapoint """
-    """ ------------- Update this function ------------- """
     stock = quote['stock']
     bid_price = float(quote['top_bid']['price'])
     ask_price = float(quote['top_ask']['price'])
-    price = bid_price
+    """Modified the price formula to compute the right stock price"""
+    price = (bid_price + ask_price) / 2
     return stock, bid_price, ask_price, price
 
 
 def getRatio(price_a, price_b):
     """ Get ratio of price_a and price_b """
-    """ ------------- Update this function ------------- """
-    return 1
+    if (price_b == 0):
+        """When price_b is 0 avoid throwing ZeroDivisionError"""
+        return
+    return price_a / price_b
 
 
 # Main
@@ -50,10 +53,11 @@ if __name__ == "__main__":
     # Query the price once every N seconds.
     for _ in iter(range(N)):
         quotes = json.loads(urllib.request.urlopen(QUERY.format(random.random())).read())
-
-        """ ----------- Update to get the ratio --------------- """
+        """ Updating getRatio method by implementing a dictionary to retrieve stock price"""
+        prices = {}
         for quote in quotes:
             stock, bid_price, ask_price, price = getDataPoint(quote)
+            prices[stock] = price
             print("Quoted %s at (bid:%s, ask:%s, price:%s)" % (stock, bid_price, ask_price, price))
 
-        print("Ratio %s" % getRatio(price, price))
+        print("Ratio %s" % getRatio(prices["ABC"], prices["DEF"]))
diff --git a/client_test.py b/client_test.py
old mode 100644
new mode 100755
index af2bf26..37f4a57
--- a/client_test.py
+++ b/client_test.py
@@ -1,25 +1,40 @@
 import unittest
-from client3 import getDataPoint
+from client3 import getDataPoint, getRatio
 
-class ClientTest(unittest.TestCase):
-  def test_getDataPoint_calculatePrice(self):
-    quotes = [
-      {'top_ask': {'price': 121.2, 'size': 36}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 120.48, 'size': 109}, 'id': '0.109974697771', 'stock': 'ABC'},
-      {'top_ask': {'price': 121.68, 'size': 4}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 117.87, 'size': 81}, 'id': '0.109974697771', 'stock': 'DEF'}
-    ]
-    """ ------------ Add the assertion below ------------ """
-
-  def test_getDataPoint_calculatePriceBidGreaterThanAsk(self):
-    quotes = [
-      {'top_ask': {'price': 119.2, 'size': 36}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 120.48, 'size': 109}, 'id': '0.109974697771', 'stock': 'ABC'},
-      {'top_ask': {'price': 121.68, 'size': 4}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 117.87, 'size': 81}, 'id': '0.109974697771', 'stock': 'DEF'}
-    ]
-    """ ------------ Add the assertion below ------------ """
 
+class ClientTest(unittest.TestCase):
+    def test_getDataPoint_calculatePrice(self):
+        quotes = [
+            {'top_ask': {'price': 121.2, 'size': 36}, 'timestamp': '2019-02-11 22:06:30.572453',
+                'top_bid': {'price': 120.48, 'size': 109}, 'id': '0.109974697771', 'stock': 'ABC'},
+            {'top_ask': {'price': 121.68, 'size': 4}, 'timestamp': '2019-02-11 22:06:30.572453',
+                'top_bid': {'price': 117.87, 'size': 81}, 'id': '0.109974697771', 'stock': 'DEF'}
+        ]
+        for quote in quotes:
+            self.assertEqual(getDataPoint(quote), (quote['stock'], quote['top_bid']['price'],
+                        quote['top_ask']['price'], (quote['top_bid']['price'] + quote['top_ask']['price'])/2))
 
-  """ ------------ Add more unit tests ------------ """
+    def test_getDataPoint_calculatePriceBidGreaterThanAsk(self):
+        quotes = [
+            {'top_ask': {'price': 119.2, 'size': 36}, 'timestamp': '2019-02-11 22:06:30.572453',
+                'top_bid': {'price': 120.48, 'size': 109}, 'id': '0.109974697771', 'stock': 'ABC'},
+            {'top_ask': {'price': 121.68, 'size': 4}, 'timestamp': '2019-02-11 22:06:30.572453',
+                'top_bid': {'price': 117.87, 'size': 81}, 'id': '0.109974697771', 'stock': 'DEF'}
+        ]
+        for quote in quotes:
+            self.assertEqual(getDataPoint(quote), (quote['stock'], quote['top_bid']['price'],
+                        quote['top_ask']['price'], (quote['top_bid']['price'] + quote['top_ask']['price'])/2))
 
+    def test_getDataPoint_validate_tuple_return(self):
+        quote = {'stock': 'ABC', 'top_bid': {'price': '118.13'}, 'top_ask': {'price': '116.63'}}
+        result = getDataPoint(quote)
+        self.assertIsInstance(result, tuple)
+        self.assertEqual(result[0], 'ABC')
 
 
+    def test_getRatio_handle_ZeroDivision(self):
+        result = getRatio(100.0, 0.0)
+        self.assertIsNone(result)
+        
 if __name__ == '__main__':
     unittest.main()
-- 
2.25.1

